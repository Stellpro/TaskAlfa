@using TaskAlfa.Data.ItemViewModels;
@using System.IO;
@using System.Text;
@inherits ItemViewModel
<div>
    <MatDialog @bind-IsOpen="@ViewModel.DialogIsOpen" CanBeClosed="false">
        <EditForm Model="ViewModel.Model" OnValidSubmit="@(e => { Save.InvokeAsync(ViewModel.Model); })" style="width:670px">
            <MatDialogTitle class="diHeader">
                <h3>Task</h3>
                <div class="btn-group">
                    @if (ViewModel.IsConcurrencyError)
                    {<MatDialog @bind-IsOpen="@ViewModel.IsConcurrencyError" CanBeClosed="false">
                            <span class="btn btn-nav btn-primary mr-1" @onclick="@(e => Reload.InvokeAsync(ViewModel.Model))">Please Reload. This entry has been changed</span>
                        </MatDialog> }
                    else
                    {
                        <input type="submit" value="Speichern" class="btn btn-nav btn-primary mr-1" style="float: right;" />
                    }
                    <span class="btn btn-nav" @onclick="@(e => { ViewModel.DialogIsOpen = false; })">X</span>
                </div>
                <hr />
            </MatDialogTitle>
            <MatDialogContent>
                <DataAnnotationsValidator />

                <div class="form-group row mb-1">
                    <label for="TaskName" class="col-3 pl-0">TaskName</label>
                    <InputText @bind-Value="@ViewModel.Model.TaskName" Class="form-control form-control-sm col-5" id="Bezeichnung"></InputText>
                    <ValidationMessage For="@(() => ViewModel.Model.TaskName)" />
                </div>

                <div class="form-group row mb-1">
                    <label class="col-3 pl-0">Statuse</label>
                    <div class="col-9 btn-group mb-1" style="padding-left: 0px;padding-right: 0px;">
                        @if (ViewModel.TaskStatusIdModel == null)
                        {
                            <InputSelect @bind-Value="ViewModel.Model.TaskStatusId" Class="form-control form-control-sm ">
                                <option value="@((int?)null)">---</option>
                                @foreach (var selectValue in ViewModel.StatusModel)
                                    {
                                    <option value="@selectValue.TaskStatusId">
                                        @selectValue.StatusName
                                    </option>
                                    }
                            </InputSelect>
                        }
                        else
                        {
                            <InputSelect @bind-Value="ViewModel.Model.TaskStatusId" Class="form-control form-control-sm ">
                                @foreach (var selectValue in ViewModel.StatusModel)
                                    {
                                    <option value="@selectValue.TaskStatusId">
                                        @selectValue.StatusName
                                    </option>
                                    }
                            </InputSelect>
                        }
                    </div>
                </div>

                <div class="form-group row mb-1">
                    <label for="PlanDuration" class="col-3 pl-0">PlanDuration</label>
                    <InputNumber @bind-Value="@ViewModel.Model.PlanDuration" Class="form-control form-control-sm col-5" step="0.01" min="0.01"></InputNumber>
                    <ValidationMessage For="@(() => ViewModel.Model.PlanDuration)" />
                </div>
                <div class="form-group row mb-1">
                    <label for="RealDuration" class="col-3 pl-0">RealDuration</label>
                    <InputNumber @bind-Value="@ViewModel.Model.RealDuration" Class="form-control form-control-sm col-5" step="0.01" min="0.01"></InputNumber>
                    <ValidationMessage For="@(() => ViewModel.Model.RealDuration)" />
                </div>
                <div class="form-group row mb-1">
                    <label for="Description" class="col-3 pl-0">Description</label>
                    <div class="col-9 btn-group mb-1" style="padding-left: 0px;padding-right: 0px;">
                        <InputTextArea @bind-Value="@ViewModel.Model.Description" Class="form-control form-control-sm " id="Description" maxlength="500"></InputTextArea>
                        <ValidationMessage For="@(() => ViewModel.Model.Description)" />
                    </div>
                </div>
                <div class="form-group row mb-1">
                    <label for="Screen" class="col-3 pl-0">AddScreen</label>
                    <div class="col-9 btn-group mb-1" style="padding-left: 0px;padding-right: 0px;">
                        <InputFile Class="form-control form-control-sm " id="Screen"></InputFile>

                    </div>
                </div>

            </MatDialogContent>
        </EditForm>
        @if (temp != null)
        {
            <img src="data:image/bmp;base64, @(Convert.ToBase64String(temp))" />

        }
    </MatDialog>
</div>

@code {
    [Parameter]
    public EditTaskItemViewModel ViewModel { get; set; }

    public TaskDocumentItemViewModel Screen = new TaskDocumentItemViewModel();
    public ItemViewModel SaveFile = new ItemViewModel();

    [Parameter]
    public EventCallback<TaskItemViewModel> Save { get; set; }

    [Parameter]
    public EventCallback<TaskItemViewModel> Reload { get; set; }
    private DotNetObjectReference<EditTask> objRef;

    [Inject] public IJSRuntime js { get; set; }
    protected override void OnParametersSet()
    {
        objRef = DotNetObjectReference.Create(this);
        js.InvokeVoidAsync("start", objRef);

    }
    byte[] temp = null;

    [JSInvokable("SingleUpload")]

    public async void SingleUpload(string e)
    {
        var t = e.Split(',');
        var Decoding = Convert.FromBase64String(t[1]);
        temp = Decoding;
        var name = t[0].Split('/');
        Screen.TaskDocumentId = 0;
        Screen.FileName = name[1];
        Screen.Answer = true;
        Screen.Dokument = Decoding;
        Screen.TaskId = ViewModel.Model.TaskId;

        CreateOrUpdate(Screen);


        StateHasChanged();
    }


}

